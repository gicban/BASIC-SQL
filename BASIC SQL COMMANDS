echo "# BASIC-SQL" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/gicban/BASIC-SQL.git
git push -u origin main

-SQL COMMANDS USED TO QUERY A TABLE-- 
--PURPOSE: TO RETRIEVE INFORMATION STORED IN A DATABASE OTHERWISE KNOWN AS "QUERYING"--

--USING THE SELECT STATEMENT--
SELECT column1, column2 
FROM table_name;

--EXAMPLE--
SELECT name, genre, year
FROM movies;

--USING THE AS STATEMENT--
--USE THE AS STATEMENT WHEN YOU WANT TO RENAME A COLUMN OR TABLE USING AN ALIAS, NEW NAME CAN BE ANYTHING YOU WANT AS LONG AS IT'S INSIDE SINGLE QUOTES. NOTE THAT USING THIS STATEMENT DOES NOT RENAME THE COLUMN IN THE TABLE, IT ONLY SHOWS IN THE RESULT--

--EXAMPLE--
SELECT name AS 'Titles'
FROM movies;

--USING THE DISTINCT STATEMENT-- 
--USE THE DISTINCT STATEMENT TO RETURN UNIQUE VALUES IN THE OUTPUT. IT FILTERS OUT ALL DUPLICATE VALUES IN THE SPECIFIED COLUMN(S)

--EXAMPLE--
SELECT DISTINCT tools 
FROM inventory;

--USING THE WHERE STATEMENT--
--USE THIS TO FILTER OUT THE RESULTS SET TO ONLY INCLUDE ROWS WHERE THE CONDITION IS TRUE--
--YOU CAN USE OPERATORS TO CREATE A CONDITION THAT CAN BE EVALUATED AS EITHER TRUE OR FALSE--
--LIST OF OPERATORS--
= equal to
!= not equal to
> greater than
< less than
>= greater than or equal to
<= less than or equal to

--EXAMPLE--
SELECT *
FROM movies
WHERE imdb_rating > 8;

--USING THE LIKE I STATEMENT--
--LIKE can be a useful operator when you want to compare similar values.--
--EXAMPLE--
SELECT * 
FROM movies
WHERE name LIKE 'Se_en';

//The _ means you can substitute any individual character here without breaking the pattern. The names Seven and Se7en both match this pattern. // 


--USING THE LIKE II STATEMENT--
% is a wildcard character that matches zero or more missing letters in the pattern. For example:

A% matches all movies with names that begin with letter ‘A’
%a matches all movies that end with ‘a’

--EXAMPLE--
SELECT * 
FROM movies
WHERE name LIKE 'A%';

--EXAMPLE--
SELECT * 
FROM movies
WHERE name LIKE 'The %';

--USING THE NULL STATEMENT--
Unknown values are indicated by NULL.
It is not possible to test for NULL values with comparison operators, such as = and !=.
Instead, we will have to use these operators:

IS NULL
IS NOT NULL

--EXAMPLE--

SELECT name
FROM movies 
WHERE imdb_rating IS NOT NULL;

--USING THE BETWEEN STATEMENT--
The BETWEEN operator is used in a WHERE clause to filter the result set within a certain range. It accepts two values that are either numbers, text or dates.
BETWEEN goes up to the second value 

--EXMAPLE USE THE BELOW QUERY TO GET RESULTS OF MOVIES THAT START WITH THE LETTER D, E, F-- 
SELECT *
FROM movies
WHERE name BETWEEN 'D' AND 'G'; 
--EXAMPLE--
SELECT *
FROM movies
WHERE year BETWEEN 1990 AND 1999;

Also, numeric values (INTEGER or REAL data types) don’t need to be wrapped with single quotes, whereas TEXT values do.


--USING THE AND OPERATOR--
--USE IF YOU WANT TO COMBINE MULTIPLE CONDITIONS, HELPS FURTHER NARROW DOWN DATA--
--EXAMPLE--
SELECT *
FROM movies
WHERE year < '1985'
  AND genre = 'horror'
  
  --USING OR OPERATOR--
  --DIFFERENCE BETWEEN AND AND OR: AND operator displays a row if all the conditions are true.
OR operator displays a row if any condition is true.-- 

--EXAMPLE--
SELECT *
FROM movies
WHERE year > 2014
   OR genre = 'action';
   
   --EXAMPLE 2-- 
   SELECT *
FROM movies
WHERE genre = 'romance' or genre = 'comedy'

--USING THE ORDER BY--
--USE WHEN YOU WANT TO SORT THE RESULTS EITHER ALPHABETICALLY OR NUMERICALLY BY A PARTICULAR COLUMN--
--EXAMPLE--
SELECT *
FROM movies
ORDER BY name;

DESC is a keyword used in ORDER BY to sort the results in descending order (high to low or Z-A).

ASC is a keyword used in ORDER BY to sort the results in ascending order (low to high or A-Z).


--USING LIMIT--
LIMIT is a clause that lets you specify the maximum number of rows the result set will have. This saves space on our screen and makes our queries run faster.
LIMIT always goes at the very end of the query. Also, it is not supported in all SQL databases.

--EXAMPLE-- 
SELECT *
FROM movies
LIMIT 10;

--EXAMPLE--
SELECT *
FROM movies
ORDER BY imdb_rating DESC
LIMIT 3;

-USING CASE STATEMENTS--
A CASE statement allows us to create different outputs (usually in the SELECT statement). It is SQL’s way of handling if-then logic.
Each WHEN tests a condition and the following THEN gives us the string if the condition is true.
The ELSE gives us the string if all the above conditions are false.
The CASE statement must end with END.

--EXAMPLE--
SELECT name,
 CASE
  WHEN imdb_rating > 8 THEN 'Fantastic'
  WHEN imdb_rating > 6 THEN 'Poorly Received'
  ELSE 'Avoid at All Costs'
 END
FROM movies;

--EXAMPLE 2--
SELECT name,
 CASE
  WHEN genre = 'romance' THEN 'chill'
  WHEN genre = 'comedy' 
  THEN 'chill'
  ELSE 'Intense' 
 END AS 'Mood'
FROM movies;

--EXAMPLE 3 (SHORTER VERSION OF EXAMPLE 2)
SELECT name,
 CASE
  WHEN genre = 'romance' OR genre = 'comedy' 
   THEN 'Chill'
  ELSE 'Intense'
 END AS 'Mood'
FROM movies;

SUMMARY 

SELECT is the clause we use every time we want to query information from a database.
AS renames a column or table.

DISTINCT return unique values.

WHERE is a popular command that lets you filter the results of the query based on conditions that you specify.

LIKE and BETWEEN are special operators.

AND and OR combines multiple conditions.

ORDER BY sorts the result.

LIMIT specifies the maximum number of rows that the query will return.

CASE creates different outputs.
  
